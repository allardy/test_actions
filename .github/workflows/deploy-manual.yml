name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        type: choice
        options: ['tables-api', 'another-service']
      deploy-staging:
        description: 'Deploy to Staging?'
        required: false
        default: false
        type: boolean
      deploy-production:
        description: 'Deploy to Production?'
        required: false
        default: false
        type: boolean
      deploy-dev:
        description: 'Deploy to Dev?'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  manual-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Load Service Configuration
        id: config
        run: |
          SERVICE_FILE="services.json"
          SELECTED_SERVICE="${{ inputs.service }}"
          CONFIG=$(jq -c --arg service "$SELECTED_SERVICE" '.[$service]' "$SERVICE_FILE")

          if [ "$CONFIG" == "null" ]; then
            echo "Service $SELECTED_SERVICE not found in $SERVICE_FILE"
            exit 1
          fi

          echo "Service '$SELECTED_SERVICE' is valid."
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Deploy to Staging
        if: inputs.deploy-staging == true
        env:
          AWS_PROFILE: cloud-staging
        uses: ./.github/actions/tag-and-deploy.yml
        with:
          repository: ${{ inputs.service }}
          cluster: ${{ fromJson(env.CONFIG).cluster }}
          services: ${{ join(fromJson(env.CONFIG).services, ',') }}
          image-tag: ${{ github.sha }}

      - name: Deploy to Production
        if: inputs.deploy-production == true
        env:
          AWS_PROFILE: cloud-production
        uses: ./.github/actions/tag-and-deploy.yml
        with:
          repository: ${{ inputs.service }}
          cluster: ${{ fromJson(env.CONFIG).cluster }}
          services: ${{ join(fromJson(env.CONFIG).services, ',') }}
          image-tag: ${{ github.sha }}
